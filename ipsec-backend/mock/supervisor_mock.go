// Code generated by MockGen. DO NOT EDIT.
// Source: supervisor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSupervisorInterface is a mock of SupervisorInterface interface.
type MockSupervisorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSupervisorInterfaceMockRecorder
}

// MockSupervisorInterfaceMockRecorder is the mock recorder for MockSupervisorInterface.
type MockSupervisorInterfaceMockRecorder struct {
	mock *MockSupervisorInterface
}

// NewMockSupervisorInterface creates a new mock instance.
func NewMockSupervisorInterface(ctrl *gomock.Controller) *MockSupervisorInterface {
	mock := &MockSupervisorInterface{ctrl: ctrl}
	mock.recorder = &MockSupervisorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupervisorInterface) EXPECT() *MockSupervisorInterfaceMockRecorder {
	return m.recorder
}

// ReloadStrongswan mocks base method.
func (m *MockSupervisorInterface) ReloadStrongswan() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadStrongswan")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadStrongswan indicates an expected call of ReloadStrongswan.
func (mr *MockSupervisorInterfaceMockRecorder) ReloadStrongswan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadStrongswan", reflect.TypeOf((*MockSupervisorInterface)(nil).ReloadStrongswan))
}

// ReloadSupervisor mocks base method.
func (m *MockSupervisorInterface) ReloadSupervisor() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSupervisor")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSupervisor indicates an expected call of ReloadSupervisor.
func (mr *MockSupervisorInterfaceMockRecorder) ReloadSupervisor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSupervisor", reflect.TypeOf((*MockSupervisorInterface)(nil).ReloadSupervisor))
}

// ReloadVtysh mocks base method.
func (m *MockSupervisorInterface) ReloadVtysh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadVtysh")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadVtysh indicates an expected call of ReloadVtysh.
func (mr *MockSupervisorInterfaceMockRecorder) ReloadVtysh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadVtysh", reflect.TypeOf((*MockSupervisorInterface)(nil).ReloadVtysh))
}
