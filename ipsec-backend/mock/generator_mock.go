// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package mock is a generated GoMock package.
package mock

import (
	db "ipsec_backend/db"
	sico_yang "ipsec_backend/sico_yang"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// DeleteConfigs mocks base method.
func (m *MockGenerator) DeleteConfigs(v db.Vrf, switchCreds ...db.SwitchCreds) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{v}
	for _, a := range switchCreds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigs indicates an expected call of DeleteConfigs.
func (mr *MockGeneratorMockRecorder) DeleteConfigs(v interface{}, switchCreds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{v}, switchCreds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigs", reflect.TypeOf((*MockGenerator)(nil).DeleteConfigs), varargs...)
}

// GenerateConfigs mocks base method.
func (m *MockGenerator) GenerateConfigs(v db.Vrf, switchCreds ...db.SwitchCreds) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{v}
	for _, a := range switchCreds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateConfigs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateConfigs indicates an expected call of GenerateConfigs.
func (mr *MockGeneratorMockRecorder) GenerateConfigs(v interface{}, switchCreds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{v}, switchCreds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateConfigs", reflect.TypeOf((*MockGenerator)(nil).GenerateConfigs), varargs...)
}

// GetMonitoring mocks base method.
func (m *MockGenerator) GetMonitoring(clientName *string, switchCreds ...db.SwitchCreds) (*sico_yang.SicoIpsec_Api_Monitoring, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{clientName}
	for _, a := range switchCreds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonitoring", varargs...)
	ret0, _ := ret[0].(*sico_yang.SicoIpsec_Api_Monitoring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoring indicates an expected call of GetMonitoring.
func (mr *MockGeneratorMockRecorder) GetMonitoring(clientName interface{}, switchCreds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{clientName}, switchCreds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoring", reflect.TypeOf((*MockGenerator)(nil).GetMonitoring), varargs...)
}
