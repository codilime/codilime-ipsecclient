/*
Package sico_yang is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/marcin/go/pkg/mod/github.com/openconfig/ygot@v0.12.0/genutil/names.go
using the following YANG input files:
	- sico-ipsec.yang
Imported modules were sourced from:
*/
package sico_yang

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// SicoIpsec_Api represents the /sico-ipsec/api YANG schema element.
type SicoIpsec_Api struct {
	Vrfs	map[int64]*SicoIpsec_Api_Vrfs	`path:"vrfs" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api) IsYANGGoStruct() {}

// NewVrfs creates a new entry in the Vrfs list of the
// SicoIpsec_Api struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api) NewVrfs(Id int64) (*SicoIpsec_Api_Vrfs, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrfs == nil {
		t.Vrfs = make(map[int64]*SicoIpsec_Api_Vrfs)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrfs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrfs", key)
	}

	t.Vrfs[key] = &SicoIpsec_Api_Vrfs{
		Id: &Id,
	}

	return t.Vrfs[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrfs represents the /sico-ipsec/api/vrfs YANG schema element.
type SicoIpsec_Api_Vrfs struct {
	Active	*bool	`path:"active" module:"sico-ipsec"`
	ClientName	*string	`path:"client_name" module:"sico-ipsec"`
	CryptoPh1	*string	`path:"crypto_ph1" module:"sico-ipsec"`
	CryptoPh2	*string	`path:"crypto_ph2" module:"sico-ipsec"`
	Endpoints	map[int64]*SicoIpsec_Api_Vrfs_Endpoints	`path:"endpoints" module:"sico-ipsec"`
	Id	*int64	`path:"id" module:"sico-ipsec"`
	LocalAs	*int64	`path:"local_as" module:"sico-ipsec"`
	PhysicalInterface	*string	`path:"physical_interface" module:"sico-ipsec"`
	Vlans	map[int64]*SicoIpsec_Api_Vrfs_Vlans	`path:"vlans" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrfs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrfs) IsYANGGoStruct() {}

// NewEndpoints creates a new entry in the Endpoints list of the
// SicoIpsec_Api_Vrfs struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api_Vrfs) NewEndpoints(Id int64) (*SicoIpsec_Api_Vrfs_Endpoints, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoints == nil {
		t.Endpoints = make(map[int64]*SicoIpsec_Api_Vrfs_Endpoints)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoints[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoints", key)
	}

	t.Endpoints[key] = &SicoIpsec_Api_Vrfs_Endpoints{
		Id: &Id,
	}

	return t.Endpoints[key], nil
}

// NewVlans creates a new entry in the Vlans list of the
// SicoIpsec_Api_Vrfs struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api_Vrfs) NewVlans(Vlan int64) (*SicoIpsec_Api_Vrfs_Vlans, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlans == nil {
		t.Vlans = make(map[int64]*SicoIpsec_Api_Vrfs_Vlans)
	}

	key := Vlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlans[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlans", key)
	}

	t.Vlans[key] = &SicoIpsec_Api_Vrfs_Vlans{
		Vlan: &Vlan,
	}

	return t.Vlans[key], nil
}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Vrfs struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Vrfs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrfs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrfs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrfs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrfs_Endpoints represents the /sico-ipsec/api/vrfs/endpoints YANG schema element.
type SicoIpsec_Api_Vrfs_Endpoints struct {
	Authentication	*SicoIpsec_Api_Vrfs_Endpoints_Authentication	`path:"authentication" module:"sico-ipsec"`
	Bgp	*bool	`path:"bgp" module:"sico-ipsec"`
	Id	*int64	`path:"id" module:"sico-ipsec"`
	LocalIp	*string	`path:"local_ip" module:"sico-ipsec"`
	Nat	*bool	`path:"nat" module:"sico-ipsec"`
	PeerIp	*string	`path:"peer_ip" module:"sico-ipsec"`
	RemoteAs	*int64	`path:"remote_as" module:"sico-ipsec"`
	RemoteIpSec	*string	`path:"remote_ip_sec" module:"sico-ipsec"`
	SourceInterface	*string	`path:"source_interface" module:"sico-ipsec"`
	VrfId	*int64	`path:"vrf_id" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrfs_Endpoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrfs_Endpoints) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Vrfs_Endpoints struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Vrfs_Endpoints) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrfs_Endpoints) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrfs_Endpoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrfs_Endpoints) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrfs_Endpoints_Authentication represents the /sico-ipsec/api/vrfs/endpoints/authentication YANG schema element.
type SicoIpsec_Api_Vrfs_Endpoints_Authentication struct {
	LocalCert	*string	`path:"local_cert" module:"sico-ipsec"`
	PrivateKey	*string	`path:"private_key" module:"sico-ipsec"`
	Psk	*string	`path:"psk" module:"sico-ipsec"`
	RemoteCert	*string	`path:"remote_cert" module:"sico-ipsec"`
	Type	*string	`path:"type" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrfs_Endpoints_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrfs_Endpoints_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrfs_Endpoints_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrfs_Endpoints_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrfs_Endpoints_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrfs_Vlans represents the /sico-ipsec/api/vrfs/vlans YANG schema element.
type SicoIpsec_Api_Vrfs_Vlans struct {
	LanIp	*string	`path:"lan_ip" module:"sico-ipsec"`
	Vlan	*int64	`path:"vlan" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrfs_Vlans implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrfs_Vlans) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Vrfs_Vlans struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Vrfs_Vlans) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vlan == nil {
		return nil, fmt.Errorf("nil value for key Vlan")
	}

	return map[string]interface{}{
		"vlan": *t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrfs_Vlans) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrfs_Vlans"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrfs_Vlans) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5f, 0x73, 0xda, 0x38,
		0x10, 0x7f, 0xcf, 0xa7, 0xf0, 0xf8, 0x29, 0x9d, 0x89, 0x0f, 0x9b, 0x3f, 0x21, 0xc9, 0x5b, 0xee,
		0xda, 0xce, 0xdd, 0xf4, 0x72, 0xd7, 0x69, 0x6f, 0xf2, 0x02, 0x8c, 0x47, 0xb5, 0x05, 0x68, 0xe2,
		0xc8, 0x3e, 0x59, 0xd0, 0x32, 0x4d, 0xbe, 0xfb, 0x8d, 0x6d, 0x30, 0x98, 0x40, 0xac, 0x95, 0x4c,
		0x43, 0x73, 0xfb, 0x14, 0x62, 0xb4, 0xfa, 0xb3, 0xbb, 0xbf, 0xd5, 0x4f, 0xd2, 0x5a, 0x7c, 0x3f,
		0xb1, 0x2c, 0xcb, 0xb2, 0xff, 0x22, 0xf7, 0xd4, 0xbe, 0xb2, 0x6c, 0xfb, 0xac, 0xf8, 0xff, 0x03,
		0xe3, 0xa1, 0x7d, 0x65, 0xb9, 0xcb, 0x7f, 0x7f, 0x8b, 0xf9, 0x98, 0x4d, 0x36, 0x1e, 0xbc, 0x65,
		0xc2, 0xbe, 0xb2, 0x0a, 0xe1, 0xfc, 0x01, 0x49, 0x58, 0xe5, 0x41, 0xa5, 0xd6, 0xec, 0xcb, 0xb3,
		0xea, 0x57, 0xcb, 0x06, 0xbc, 0xad, 0xc7, 0xdb, 0x0d, 0x95, 0x5f, 0x7c, 0x14, 0x74, 0xcc, 0xbe,
		0x3d, 0x69, 0xa2, 0xd2, 0x4c, 0xca, 0x82, 0xd8, 0x61, 0x49, 0x4a, 0x83, 0xad, 0xd6, 0xf2, 0x52,
		0x9f, 0xe3, 0x99, 0x08, 0xe8, 0xce, 0x1a, 0x8a, 0x1e, 0xd1, 0xc5, 0xd7, 0x58, 0x64, 0x9d, 0xb2,
		0x93, 0xa2, 0xb1, 0xb3, 0xdd, 0x05, 0x7f, 0x27, 0xe9, 0xb5, 0x98, 0xcc, 0xee, 0x29, 0x97, 0xf6,
		0x95, 0x25, 0xc5, 0x8c, 0xee, 0x29, 0xb8, 0x51, 0x6a, 0xb3, 0x6f, 0x4f, 0x0a, 0x3f, 0x56, 0x9e,
		0x3c, 0x6e, 0x8d, 0x7c, 0x5b, 0xd5, 0xe5, 0x17, 0x73, 0x31, 0x4e, 0xf7, 0x0f, 0x67, 0xa5, 0x94,
		0xbc, 0xd4, 0x9e, 0x0e, 0xee, 0x36, 0x42, 0xad, 0x31, 0x54, 0x8c, 0x02, 0x33, 0x8e, 0xaa, 0x91,
		0xc0, 0xc6, 0x02, 0x1b, 0x0d, 0x6c, 0xbc, 0xdd, 0x46, 0xdc, 0x63, 0xcc, 0x5a, 0xa3, 0xae, 0xf1,
		0x14, 0x48, 0x36, 0x57, 0x50, 0x44, 0x09, 0xb1, 0xa2, 0x7c, 0xcd, 0xa0, 0xaa, 0xb0, 0xde, 0x5b,
		0xac, 0xce, 0xf0, 0x10, 0x07, 0xd0, 0x73, 0x04, 0xa8, 0x43, 0x68, 0x3b, 0x86, 0xb6, 0x83, 0x68,
		0x3b, 0xca, 0xf3, 0x0e, 0x53, 0xe3, 0x38, 0x65, 0xab, 0x37, 0x84, 0x87, 0x44, 0xc6, 0x62, 0xb1,
		0x1f, 0xbf, 0x65, 0xd9, 0x7f, 0x16, 0x09, 0x85, 0xd9, 0xe8, 0x4b, 0x1c, 0x47, 0x94, 0x70, 0x15,
		0x03, 0xad, 0x62, 0x88, 0x77, 0xa2, 0x37, 0xd8, 0x67, 0x06, 0x6a, 0x07, 0x11, 0xa3, 0x5c, 0xfa,
		0xbc, 0xe8, 0x95, 0x22, 0x12, 0x36, 0x85, 0x10, 0x0e, 0x08, 0x87, 0x06, 0xe0, 0x90, 0x4a, 0xc1,
		0xf8, 0x04, 0x82, 0x86, 0x8b, 0x43, 0xa0, 0x41, 0x2c, 0x12, 0x19, 0xfb, 0xc9, 0xd4, 0x03, 0x80,
		0x61, 0x2d, 0x83, 0x58, 0x40, 0x2c, 0xbc, 0x3e, 0x2c, 0xb4, 0x35, 0xb0, 0xd0, 0x46, 0x2c, 0x20,
		0x16, 0x5e, 0x0f, 0x16, 0x28, 0x0f, 0x93, 0x98, 0x71, 0x99, 0xaa, 0x43, 0x61, 0x2d, 0xa2, 0x86,
		0x04, 0x0f, 0x91, 0xf0, 0xb3, 0x23, 0xa1, 0x6e, 0xc5, 0xb9, 0x5e, 0x79, 0xce, 0xe4, 0x94, 0x72,
		0xc9, 0x02, 0x22, 0x59, 0xcc, 0xd5, 0x15, 0x59, 0xae, 0x44, 0xab, 0xf2, 0x8a, 0x4a, 0x51, 0x73,
		0x34, 0xb0, 0xc3, 0xe9, 0x38, 0x9e, 0x99, 0x03, 0xea, 0x3a, 0xa2, 0xb1, 0x43, 0x1a, 0x3b, 0xa6,
		0xb1, 0x83, 0xaa, 0x39, 0xaa, 0xa2, 0xc3, 0x82, 0x1d, 0xb7, 0x14, 0x88, 0xe2, 0x80, 0x44, 0x7e,
		0x40, 0x85, 0x84, 0x2b, 0x7f, 0x65, 0xf2, 0x8d, 0x3a, 0x80, 0xca, 0x53, 0xe3, 0x0e, 0xc6, 0x0e,
		0x6d, 0xe2, 0xd8, 0xcd, 0x38, 0xb8, 0xa9, 0xa3, 0x37, 0xe6, 0xf0, 0x8d, 0x39, 0x7e, 0x63, 0x00,
		0x80, 0x01, 0x01, 0x08, 0x08, 0x38, 0x5f, 0x31, 0xe7, 0x2f, 0x9a, 0x7c, 0x46, 0x5f, 0x1f, 0x00,
		0x5d, 0xd8, 0x89, 0x60, 0x73, 0x22, 0xa9, 0x7f, 0x47, 0x17, 0xfa, 0x80, 0xdf, 0xac, 0x04, 0x11,
		0x8f, 0x88, 0x47, 0xc4, 0x1f, 0x33, 0xe2, 0xd3, 0x3b, 0x03, 0xa4, 0xa7, 0x77, 0x88, 0x70, 0x44,
		0x38, 0x22, 0xfc, 0x98, 0x11, 0x2e, 0xe8, 0x7d, 0x2c, 0xa9, 0x21, 0x89, 0xdf, 0xac, 0x04, 0x11,
		0x8f, 0x88, 0x47, 0xc4, 0x1f, 0x31, 0xe2, 0xa5, 0x8e, 0x1e, 0x4a, 0x1d, 0xe4, 0xd2, 0x88, 0x71,
		0xc4, 0xf8, 0x51, 0x62, 0x1c, 0x70, 0x0a, 0x71, 0x80, 0xf8, 0x50, 0xdd, 0x90, 0x75, 0x34, 0xa0,
		0x52, 0x0d, 0x16, 0x1a, 0xb2, 0x1f, 0x89, 0x94, 0x54, 0x70, 0xfb, 0xca, 0x1a, 0xe8, 0xd9, 0x39,
		0x9b, 0xc3, 0xd3, 0x87, 0x8c, 0xba, 0x83, 0xe5, 0x47, 0x87, 0x0a, 0x6e, 0x8d, 0xee, 0x72, 0x5e,
		0x73, 0x1e, 0x4b, 0xd8, 0x8e, 0x7b, 0x2e, 0x97, 0x06, 0x53, 0x7a, 0x4f, 0x12, 0x22, 0xa7, 0x99,
		0xa9, 0x5b, 0x6b, 0x0c, 0xb4, 0x48, 0xc2, 0x5a, 0x73, 0x31, 0x4e, 0x5b, 0xe5, 0x61, 0x4f, 0x4b,
		0x6b, 0x6b, 0xbe, 0x68, 0x46, 0x8a, 0x59, 0x20, 0x97, 0x89, 0x38, 0xf6, 0x67, 0x16, 0xc4, 0x7f,
		0x64, 0x8d, 0xf8, 0xd7, 0x09, 0xf3, 0x6f, 0xc5, 0x38, 0xf5, 0xdf, 0xad, 0x1a, 0xf1, 0xaf, 0xab,
		0x8d, 0x9c, 0x34, 0xa3, 0x4b, 0x05, 0x3d, 0xda, 0x5f, 0x26, 0x09, 0xfc, 0xb8, 0x22, 0x13, 0x82,
		0x9d, 0x51, 0xb8, 0x78, 0x46, 0x81, 0x67, 0x14, 0xc6, 0x01, 0x1e, 0x1e, 0xd8, 0x35, 0xb2, 0xf3,
		0x9e, 0x04, 0x6f, 0xef, 0x07, 0xc2, 0x91, 0x85, 0x70, 0x34, 0xb2, 0x10, 0xc1, 0x88, 0x60, 0x34,
		0x03, 0xa3, 0x3e, 0xb0, 0x18, 0x97, 0xe7, 0x5d, 0x0d, 0x58, 0x75, 0x01, 0x22, 0x9f, 0x08, 0x9f,
		0x50, 0x30, 0x11, 0xd2, 0xa0, 0x7f, 0x37, 0x8c, 0x1b, 0x30, 0x7d, 0xd0, 0x71, 0xfc, 0x13, 0xf1,
		0x5b, 0x12, 0xcd, 0xb2, 0x41, 0x5e, 0xb6, 0xdb, 0x9d, 0x4e, 0xbf, 0xed, 0x76, 0xce, 0x2f, 0x7a,
		0xdd, 0x7e, 0xbf, 0x77, 0xe1, 0x5e, 0x68, 0xd6, 0xf8, 0x5e, 0x90, 0x20, 0xe3, 0x13, 0x6f, 0xd9,
		0x84, 0xe5, 0x99, 0x2e, 0x2e, 0x9c, 0xe3, 0x6b, 0x10, 0xd7, 0x1b, 0xf2, 0xcd, 0x58, 0x89, 0x6e,
		0xe3, 0x4a, 0xec, 0xbf, 0xa0, 0x12, 0x0f, 0xc4, 0xa6, 0x47, 0x3f, 0x70, 0x62, 0x2a, 0x0e, 0xf7,
		0x99, 0x06, 0x59, 0x2c, 0x25, 0x71, 0x92, 0xc2, 0x49, 0xea, 0x27, 0x62, 0x8c, 0x61, 0x2c, 0x25,
		0x0d, 0x9d, 0x7f, 0x67, 0x24, 0xd4, 0x61, 0x8d, 0x80, 0xa0, 0xad, 0xbd, 0xd4, 0xb7, 0x4f, 0x4f,
		0x07, 0xae, 0x73, 0x39, 0x7a, 0x18, 0x78, 0xce, 0xe5, 0xa8, 0xf8, 0xe8, 0xe5, 0x7f, 0x8a, 0xcf,
		0xed, 0x81, 0xeb, 0x74, 0x57, 0x9f, 0x7b, 0x03, 0xd7, 0xe9, 0x8d, 0xde, 0x0c, 0x87, 0xbf, 0xbc,
		0xf9, 0xde, 0x79, 0x84, 0x0b, 0xda, 0x47, 0x19, 0x97, 0x38, 0x91, 0xf0, 0x90, 0x94, 0x09, 0x61,
		0x34, 0xc2, 0x68, 0x84, 0xeb, 0xd7, 0xa6, 0xe1, 0x98, 0x50, 0x2a, 0xb4, 0x58, 0xc2, 0x4a, 0x10,
		0x61, 0x89, 0xb0, 0x44, 0x92, 0x80, 0x24, 0xa1, 0xd1, 0xa8, 0xb4, 0x4c, 0x6a, 0x20, 0x29, 0x3c,
		0x2e, 0xad, 0x45, 0x31, 0x32, 0x61, 0x64, 0xc2, 0x3d, 0x36, 0xdc, 0x63, 0xc3, 0x3d, 0x36, 0xdc,
		0x63, 0x3b, 0xe8, 0x34, 0xc5, 0x12, 0x3f, 0x8b, 0x52, 0xba, 0x53, 0xd5, 0x52, 0x1c, 0xa7, 0x2b,
		0x9c, 0xae, 0x90, 0x48, 0x23, 0x91, 0x6e, 0x34, 0x42, 0xa5, 0x39, 0xb6, 0x7c, 0xc6, 0x25, 0x15,
		0x63, 0x02, 0x79, 0x65, 0xb8, 0xc4, 0xf4, 0x76, 0x0d, 0x18, 0xa7, 0x30, 0x4e, 0xbd, 0x10, 0xad,
		0x06, 0x27, 0x01, 0x03, 0x93, 0x7f, 0x9b, 0xc1, 0xdc, 0x5c, 0x8c, 0x7d, 0x9d, 0xb4, 0x90, 0xa5,
		0x1c, 0xe2, 0x0b, 0xf1, 0x85, 0xcb, 0x56, 0x5c, 0xb6, 0xe2, 0xb2, 0x15, 0x97, 0xad, 0x1a, 0x13,
		0x94, 0xd1, 0xfd, 0x29, 0x1f, 0xf2, 0xb7, 0xcb, 0xeb, 0x13, 0x14, 0xed, 0x3f, 0x59, 0x2a, 0xaf,
		0xa5, 0x54, 0xbc, 0x6d, 0xe5, 0x86, 0xf1, 0x77, 0x11, 0xcd, 0x22, 0x64, 0xaa, 0xe6, 0x0f, 0x99,
		0xdf, 0x6d, 0x48, 0x78, 0x17, 0xdd, 0xee, 0x79, 0xbf, 0xdb, 0x75, 0xfb, 0x9d, 0xbe, 0x7b, 0xd9,
		0xeb, 0x79, 0xe7, 0x5e, 0x4f, 0xa1, 0x92, 0xbf, 0x45, 0x48, 0x05, 0x0d, 0x7f, 0xcd, 0xc6, 0xc4,
		0x67, 0x51, 0x64, 0xa4, 0x1a, 0x60, 0xee, 0x3a, 0x28, 0x67, 0x5d, 0xe5, 0xca, 0x1f, 0xf5, 0xe4,
		0x74, 0xfb, 0x00, 0xd7, 0x2f, 0x29, 0xf0, 0x19, 0xf5, 0xf4, 0x56, 0xbc, 0x7a, 0xac, 0x79, 0x2e,
		0xf2, 0x42, 0x17, 0x2e, 0xc1, 0xaf, 0x13, 0x53, 0xe5, 0x18, 0x00, 0x6e, 0x01, 0xe4, 0x14, 0x00,
		0x62, 0xa4, 0xc3, 0x21, 0x34, 0xb9, 0x43, 0x73, 0x9c, 0xc1, 0x64, 0x9a, 0x83, 0xbc, 0xcc, 0xa8,
		0xc3, 0x0d, 0x74, 0xdf, 0x47, 0x6c, 0x8c, 0x0b, 0x18, 0x29, 0xa7, 0xa1, 0x39, 0x7a, 0x74, 0x80,
		0x00, 0x5d, 0x24, 0x6d, 0x12, 0xc0, 0xf5, 0x78, 0xa5, 0x04, 0x06, 0x6b, 0xbc, 0x27, 0x12, 0x03,
		0x3b, 0x06, 0x76, 0x0c, 0xec, 0xc7, 0x18, 0xd8, 0x93, 0xe9, 0x22, 0x65, 0x79, 0x42, 0xbe, 0xf2,
		0x1e, 0xfe, 0x3a, 0x47, 0xef, 0xa9, 0x2c, 0x06, 0x7b, 0x0c, 0xf6, 0x0d, 0x04, 0xfb, 0xe3, 0xb8,
		0x14, 0x78, 0x1e, 0x11, 0x0e, 0x60, 0x3c, 0x45, 0x71, 0xbc, 0x0c, 0x18, 0x2f, 0x03, 0xde, 0xe2,
		0xce, 0x84, 0xeb, 0xbd, 0x28, 0x55, 0xc8, 0xe1, 0x81, 0x0d, 0x1e, 0xd8, 0x98, 0x70, 0xae, 0x97,
		0x4b, 0xdc, 0x70, 0xbe, 0x32, 0x39, 0x75, 0xee, 0x09, 0xe8, 0xb2, 0xc0, 0xd7, 0x9b, 0xc2, 0x31,
		0x1c, 0x0e, 0x87, 0xad, 0xd3, 0xcd, 0xb2, 0x79, 0xb1, 0xcb, 0xd1, 0x43, 0x67, 0xe0, 0x3a, 0xed,
		0x63, 0xcd, 0xf1, 0xc8, 0xa6, 0x35, 0x8d, 0xd3, 0xe6, 0x88, 0x70, 0x0c, 0x5d, 0x18, 0xba, 0xcc,
		0x42, 0x17, 0x9e, 0x35, 0x5b, 0x78, 0xd6, 0x6c, 0xb6, 0xdd, 0x60, 0xb4, 0xed, 0x60, 0xb8, 0xfd,
		0xd0, 0xfc, 0x36, 0x44, 0xa3, 0x4a, 0xfc, 0x3f, 0x9c, 0x35, 0x2b, 0xcc, 0x43, 0x78, 0xda, 0x5c,
		0xdb, 0xb8, 0xc2, 0x69, 0xb3, 0xca, 0xea, 0xd7, 0x52, 0x3a, 0x69, 0xbe, 0xcd, 0x6b, 0xd2, 0x5d,
		0xcf, 0x83, 0x7e, 0x42, 0xb4, 0x2e, 0x21, 0x41, 0xcd, 0x35, 0xd4, 0x5d, 0xc2, 0xc8, 0x15, 0xd4,
		0x5c, 0x60, 0xdf, 0x50, 0x15, 0x4d, 0xae, 0x60, 0xea, 0xe7, 0x7e, 0x7b, 0xb6, 0xce, 0xb8, 0xbb,
		0xcd, 0xfa, 0x08, 0xfc, 0x39, 0xdf, 0x9a, 0xb1, 0x3c, 0x3f, 0x86, 0x5d, 0xbf, 0x6b, 0xfc, 0x4c,
		0xb7, 0xab, 0x3d, 0x5e, 0xf7, 0xab, 0xf8, 0xb4, 0xec, 0xd9, 0xbe, 0x1e, 0xd9, 0x2c, 0x7d, 0x4f,
		0xee, 0xe8, 0xa7, 0x38, 0x5e, 0xd1, 0xb1, 0x42, 0xea, 0xe4, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0xff,
		0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xfe, 0x74, 0x3b, 0x34, 0x7a, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

