/*
Package sico_yang is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/marcin/go/pkg/mod/github.com/openconfig/ygot@v0.12.0/genutil/names.go
using the following YANG input files:
	- sico-ipsec.yang
Imported modules were sourced from:
*/
package sico_yang

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// SicoIpsec_Api represents the /sico-ipsec/api YANG schema element.
type SicoIpsec_Api struct {
	Ca	map[uint32]*SicoIpsec_Api_Ca	`path:"ca" module:"sico-ipsec"`
	Log	map[string]*SicoIpsec_Api_Log	`path:"log" module:"sico-ipsec"`
	Monitoring	map[uint32]*SicoIpsec_Api_Monitoring	`path:"monitoring" module:"sico-ipsec"`
	Password	*string	`path:"password" module:"sico-ipsec"`
	Setting	map[string]*SicoIpsec_Api_Setting	`path:"setting" module:"sico-ipsec"`
	Vrf	map[uint32]*SicoIpsec_Api_Vrf	`path:"vrf" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api) IsYANGGoStruct() {}

// NewCa creates a new entry in the Ca list of the
// SicoIpsec_Api struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api) NewCa(Id uint32) (*SicoIpsec_Api_Ca, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ca == nil {
		t.Ca = make(map[uint32]*SicoIpsec_Api_Ca)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ca[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ca", key)
	}

	t.Ca[key] = &SicoIpsec_Api_Ca{
		Id: &Id,
	}

	return t.Ca[key], nil
}

// NewLog creates a new entry in the Log list of the
// SicoIpsec_Api struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api) NewLog(Name string) (*SicoIpsec_Api_Log, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Log == nil {
		t.Log = make(map[string]*SicoIpsec_Api_Log)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Log[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Log", key)
	}

	t.Log[key] = &SicoIpsec_Api_Log{
		Name: &Name,
	}

	return t.Log[key], nil
}

// NewMonitoring creates a new entry in the Monitoring list of the
// SicoIpsec_Api struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api) NewMonitoring(Id uint32) (*SicoIpsec_Api_Monitoring, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Monitoring == nil {
		t.Monitoring = make(map[uint32]*SicoIpsec_Api_Monitoring)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Monitoring[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Monitoring", key)
	}

	t.Monitoring[key] = &SicoIpsec_Api_Monitoring{
		Id: &Id,
	}

	return t.Monitoring[key], nil
}

// NewSetting creates a new entry in the Setting list of the
// SicoIpsec_Api struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api) NewSetting(Name string) (*SicoIpsec_Api_Setting, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Setting == nil {
		t.Setting = make(map[string]*SicoIpsec_Api_Setting)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Setting[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Setting", key)
	}

	t.Setting[key] = &SicoIpsec_Api_Setting{
		Name: &Name,
	}

	return t.Setting[key], nil
}

// NewVrf creates a new entry in the Vrf list of the
// SicoIpsec_Api struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api) NewVrf(Id uint32) (*SicoIpsec_Api_Vrf, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrf == nil {
		t.Vrf = make(map[uint32]*SicoIpsec_Api_Vrf)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrf", key)
	}

	t.Vrf[key] = &SicoIpsec_Api_Vrf{
		Id: &Id,
	}

	return t.Vrf[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Ca represents the /sico-ipsec/api/ca YANG schema element.
type SicoIpsec_Api_Ca struct {
	CaFile	*string	`path:"ca_file" module:"sico-ipsec"`
	Id	*uint32	`path:"id" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Ca implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Ca) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Ca struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Ca) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Ca) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Ca"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Ca) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Log represents the /sico-ipsec/api/log YANG schema element.
type SicoIpsec_Api_Log struct {
	Log	*string	`path:"log" module:"sico-ipsec"`
	Name	*string	`path:"name" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Log) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Log struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Log) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Log) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Log) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Monitoring represents the /sico-ipsec/api/monitoring YANG schema element.
type SicoIpsec_Api_Monitoring struct {
	Endpoint	map[uint32]*SicoIpsec_Api_Monitoring_Endpoint	`path:"endpoint" module:"sico-ipsec"`
	Id	*uint32	`path:"id" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Monitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Monitoring) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// SicoIpsec_Api_Monitoring struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api_Monitoring) NewEndpoint(Id uint32) (*SicoIpsec_Api_Monitoring_Endpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[uint32]*SicoIpsec_Api_Monitoring_Endpoint)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &SicoIpsec_Api_Monitoring_Endpoint{
		Id: &Id,
	}

	return t.Endpoint[key], nil
}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Monitoring struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Monitoring) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Monitoring) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Monitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Monitoring) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Monitoring_Endpoint represents the /sico-ipsec/api/monitoring/endpoint YANG schema element.
type SicoIpsec_Api_Monitoring_Endpoint struct {
	Id	*uint32	`path:"id" module:"sico-ipsec"`
	LocalIp	*string	`path:"local_ip" module:"sico-ipsec"`
	PeerIp	*string	`path:"peer_ip" module:"sico-ipsec"`
	Status	*string	`path:"status" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Monitoring_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Monitoring_Endpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Monitoring_Endpoint struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Monitoring_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Monitoring_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Monitoring_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Monitoring_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Setting represents the /sico-ipsec/api/setting YANG schema element.
type SicoIpsec_Api_Setting struct {
	Name	*string	`path:"name" module:"sico-ipsec"`
	Value	*string	`path:"value" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Setting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Setting) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Setting struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Setting) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Setting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Setting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Setting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrf represents the /sico-ipsec/api/vrf YANG schema element.
type SicoIpsec_Api_Vrf struct {
	Active	*bool	`path:"active" module:"sico-ipsec"`
	ClientName	*string	`path:"client_name" module:"sico-ipsec"`
	CryptoPh1	*string	`path:"crypto_ph1" module:"sico-ipsec"`
	CryptoPh2	*string	`path:"crypto_ph2" module:"sico-ipsec"`
	Endpoint	map[uint32]*SicoIpsec_Api_Vrf_Endpoint	`path:"endpoint" module:"sico-ipsec"`
	Id	*uint32	`path:"id" module:"sico-ipsec"`
	LocalAs	*uint32	`path:"local_as" module:"sico-ipsec"`
	PhysicalInterface	*string	`path:"physical_interface" module:"sico-ipsec"`
	Vlan	map[uint32]*SicoIpsec_Api_Vrf_Vlan	`path:"vlan" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrf) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// SicoIpsec_Api_Vrf struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api_Vrf) NewEndpoint(Id uint32) (*SicoIpsec_Api_Vrf_Endpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[uint32]*SicoIpsec_Api_Vrf_Endpoint)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &SicoIpsec_Api_Vrf_Endpoint{
		Id: &Id,
	}

	return t.Endpoint[key], nil
}

// NewVlan creates a new entry in the Vlan list of the
// SicoIpsec_Api_Vrf struct. The keys of the list are populated from the input
// arguments.
func (t *SicoIpsec_Api_Vrf) NewVlan(Vlan uint32) (*SicoIpsec_Api_Vrf_Vlan, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint32]*SicoIpsec_Api_Vrf_Vlan)
	}

	key := Vlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &SicoIpsec_Api_Vrf_Vlan{
		Vlan: &Vlan,
	}

	return t.Vlan[key], nil
}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Vrf struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Vrf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrf_Endpoint represents the /sico-ipsec/api/vrf/endpoint YANG schema element.
type SicoIpsec_Api_Vrf_Endpoint struct {
	Authentication	*SicoIpsec_Api_Vrf_Endpoint_Authentication	`path:"authentication" module:"sico-ipsec"`
	Bgp	*bool	`path:"bgp" module:"sico-ipsec"`
	Id	*uint32	`path:"id" module:"sico-ipsec"`
	LocalIp	*string	`path:"local_ip" module:"sico-ipsec"`
	Nat	*bool	`path:"nat" module:"sico-ipsec"`
	PeerIp	*string	`path:"peer_ip" module:"sico-ipsec"`
	RemoteAs	*uint32	`path:"remote_as" module:"sico-ipsec"`
	RemoteIpSec	*string	`path:"remote_ip_sec" module:"sico-ipsec"`
	SourceInterface	*string	`path:"source_interface" module:"sico-ipsec"`
	VrfId	*uint32	`path:"vrf_id" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrf_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrf_Endpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Vrf_Endpoint struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Vrf_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrf_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrf_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrf_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrf_Endpoint_Authentication represents the /sico-ipsec/api/vrf/endpoint/authentication YANG schema element.
type SicoIpsec_Api_Vrf_Endpoint_Authentication struct {
	LocalCert	*string	`path:"local_cert" module:"sico-ipsec"`
	PrivateKey	*string	`path:"private_key" module:"sico-ipsec"`
	Psk	*string	`path:"psk" module:"sico-ipsec"`
	RemoteCert	*string	`path:"remote_cert" module:"sico-ipsec"`
	Type	*string	`path:"type" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrf_Endpoint_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrf_Endpoint_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrf_Endpoint_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrf_Endpoint_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrf_Endpoint_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SicoIpsec_Api_Vrf_Vlan represents the /sico-ipsec/api/vrf/vlan YANG schema element.
type SicoIpsec_Api_Vrf_Vlan struct {
	LanIp	*string	`path:"lan_ip" module:"sico-ipsec"`
	Vlan	*uint32	`path:"vlan" module:"sico-ipsec"`
}

// IsYANGGoStruct ensures that SicoIpsec_Api_Vrf_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SicoIpsec_Api_Vrf_Vlan) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SicoIpsec_Api_Vrf_Vlan struct, which is a YANG list entry.
func (t *SicoIpsec_Api_Vrf_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vlan == nil {
		return nil, fmt.Errorf("nil value for key Vlan")
	}

	return map[string]interface{}{
		"vlan": *t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SicoIpsec_Api_Vrf_Vlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SicoIpsec_Api_Vrf_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SicoIpsec_Api_Vrf_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x6f, 0xdb, 0x36,
		0x14, 0x7e, 0xcf, 0xaf, 0x30, 0x84, 0x3d, 0xb4, 0x40, 0xbc, 0xd8, 0x8e, 0xd3, 0xd4, 0x79, 0xcb,
		0x7a, 0xc1, 0x86, 0xb6, 0x5b, 0xd1, 0x0e, 0x79, 0x49, 0x3c, 0x83, 0x95, 0x69, 0x87, 0x88, 0x42,
		0x69, 0x12, 0x9d, 0xd6, 0x68, 0xf2, 0xdf, 0x07, 0x59, 0xb2, 0x2c, 0xdf, 0xc4, 0xab, 0x6f, 0xd9,
		0xf7, 0x14, 0xc7, 0xe6, 0xd1, 0x85, 0xe7, 0x7c, 0xdf, 0x39, 0x3c, 0x3c, 0x24, 0x7f, 0x1e, 0xd5,
		0x6a, 0xb5, 0x9a, 0xf7, 0x27, 0xb9, 0xa7, 0xde, 0x45, 0xcd, 0xf3, 0x8e, 0xb3, 0xff, 0x3f, 0x30,
		0xde, 0xf7, 0x2e, 0x6a, 0x8d, 0xfc, 0xdf, 0x37, 0x21, 0x1f, 0xb0, 0x61, 0xe9, 0x8b, 0xb7, 0x2c,
		0xf6, 0x2e, 0x6a, 0x99, 0xf0, 0xe4, 0x0b, 0x12, 0xb1, 0xb9, 0x2f, 0xe6, 0xae, 0x9a, 0xfe, 0x78,
		0x3c, 0xff, 0x53, 0x7e, 0x83, 0xe6, 0xc2, 0xd7, 0x8b, 0x37, 0x2a, 0x7e, 0xf8, 0x1c, 0xd3, 0x01,
		0xfb, 0xb1, 0x74, 0x8b, 0xb9, 0xdb, 0x24, 0xcc, 0x0f, 0xeb, 0x2c, 0x4a, 0xa8, 0xbf, 0x70, 0xb7,
		0x49, 0xab, 0xaf, 0xe1, 0x28, 0xf6, 0xe9, 0xca, 0x2b, 0x64, 0x4f, 0x44, 0xc7, 0xdf, 0xc3, 0x38,
		0x7d, 0x28, 0x2f, 0xca, 0x6e, 0x76, 0xbc, 0xba, 0xe1, 0xef, 0x24, 0xb9, 0x8c, 0x87, 0xa3, 0x7b,
		0xca, 0x85, 0x77, 0x51, 0x13, 0xf1, 0x88, 0xae, 0x69, 0x58, 0x6a, 0x55, 0x7e, 0xb6, 0xa5, 0xc6,
		0x4f, 0x73, 0xdf, 0x3c, 0x2d, 0xbc, 0xf9, 0x62, 0x57, 0x17, 0x3f, 0xf8, 0x64, 0xfd, 0xcb, 0x4c,
		0xbb, 0xc4, 0x27, 0xeb, 0xde, 0x62, 0xb5, 0x02, 0xa4, 0x8a, 0x50, 0x51, 0x88, 0x9e, 0x62, 0x54,
		0x15, 0xa4, 0xad, 0x28, 0x6d, 0x85, 0x69, 0x2b, 0x6e, 0xb5, 0x02, 0xd7, 0x28, 0x52, 0xaa, 0xd0,
		0x92, 0x62, 0x7b, 0x03, 0x16, 0x28, 0xf4, 0xc4, 0x4c, 0xcb, 0x99, 0x80, 0xe4, 0xb5, 0xe6, 0x41,
		0xbd, 0xb6, 0x99, 0x4c, 0xf5, 0x3a, 0x26, 0x60, 0x66, 0x0a, 0xba, 0x26, 0x61, 0x6c, 0x1a, 0xc6,
		0x26, 0x62, 0x6c, 0x2a, 0xd5, 0x26, 0x23, 0x31, 0x9d, 0xe2, 0xae, 0x9f, 0x08, 0xef, 0x13, 0x11,
		0xc6, 0xe3, 0xf5, 0x08, 0x2e, 0xda, 0xfe, 0x3d, 0x8e, 0xa8, 0xa6, 0x8e, 0x44, 0xcc, 0xf8, 0x50,
		0x45, 0x3f, 0x53, 0x12, 0x79, 0x7d, 0x64, 0xf6, 0xae, 0x15, 0xef, 0xe9, 0xb1, 0xbe, 0x3a, 0x00,
		0x58, 0x1f, 0xb6, 0xff, 0x7f, 0xb1, 0x7d, 0x7d, 0x7b, 0x1e, 0x31, 0x2e, 0x4e, 0x5b, 0x1a, 0xf6,
		0x7c, 0xae, 0xd0, 0xf4, 0x0b, 0xe1, 0xc3, 0xf4, 0xea, 0xd7, 0x4a, 0x7d, 0xa5, 0xa6, 0xc3, 0x0c,
		0xdb, 0x8c, 0x2b, 0x2b, 0x5d, 0xd3, 0xbc, 0x97, 0xc4, 0xae, 0x48, 0x30, 0xa2, 0x06, 0x72, 0xef,
		0x63, 0xe2, 0x0b, 0x16, 0xf2, 0xb7, 0x6c, 0xc8, 0x44, 0x92, 0x5e, 0x40, 0x59, 0xfe, 0xe9, 0x58,
		0xa3, 0x2b, 0xc8, 0x8f, 0xad, 0x77, 0x45, 0xbb, 0xd5, 0x69, 0x77, 0x5e, 0x9d, 0xb7, 0x3a, 0x67,
		0x5b, 0xec, 0x93, 0x23, 0x37, 0xad, 0xba, 0xa6, 0x34, 0xac, 0x15, 0xbf, 0x7c, 0xa0, 0xe3, 0x4a,
		0xce, 0xf5, 0x3e, 0xb2, 0x44, 0x5c, 0x0a, 0x21, 0x89, 0x72, 0x3e, 0x31, 0xfe, 0x2e, 0xa0, 0x29,
		0x7f, 0x24, 0xd5, 0xea, 0x4a, 0xcd, 0xa0, 0xd4, 0xb2, 0xf9, 0xba, 0xdd, 0x7e, 0x75, 0xde, 0x6e,
		0x37, 0xce, 0x4f, 0xcf, 0x1b, 0x9d, 0xb3, 0xb3, 0xe6, 0xab, 0x66, 0x85, 0xaa, 0xbc, 0xbf, 0xe2,
		0x3e, 0x8d, 0x69, 0xff, 0xb7, 0xf4, 0x99, 0xf9, 0x28, 0x08, 0xb4, 0x5e, 0xf5, 0x92, 0xf3, 0x50,
		0x90, 0x54, 0xab, 0xd5, 0xef, 0x92, 0xf8, 0xb7, 0xf4, 0x9e, 0x44, 0x44, 0xdc, 0xa6, 0x3d, 0x73,
		0x32, 0x23, 0xc3, 0x13, 0x12, 0xb1, 0x93, 0xb5, 0x41, 0x78, 0x26, 0x2b, 0xe2, 0x91, 0x2f, 0x78,
		0xce, 0x55, 0x5f, 0x99, 0x1f, 0xfe, 0x91, 0x4a, 0xf6, 0x2e, 0x23, 0xd6, 0x7b, 0x43, 0x56, 0xb3,
		0xe9, 0xb2, 0xc2, 0x56, 0xbc, 0x81, 0x17, 0x84, 0x43, 0xf9, 0x08, 0x21, 0x6d, 0x64, 0x39, 0x44,
		0x68, 0x61, 0x88, 0xb0, 0xed, 0x21, 0x42, 0x95, 0x6a, 0x35, 0x54, 0x8c, 0xf0, 0x08, 0x43, 0x83,
		0x03, 0x1c, 0x1a, 0xe4, 0x64, 0xa9, 0x68, 0xfe, 0x93, 0xd6, 0xb0, 0x7f, 0x0c, 0x0f, 0x76, 0x6f,
		0xd3, 0x26, 0x71, 0x56, 0x85, 0xf9, 0x22, 0xd2, 0x5a, 0x88, 0xb4, 0xaa, 0x3d, 0x5d, 0x65, 0xa8,
		0xf5, 0x31, 0x1c, 0xda, 0xc4, 0x5a, 0xf7, 0x21, 0x67, 0x22, 0x9c, 0x18, 0x92, 0x34, 0xe4, 0x2a,
		0xb5, 0x45, 0xe4, 0x75, 0x68, 0x91, 0x17, 0xe5, 0xfd, 0x28, 0x64, 0x93, 0xdb, 0x2b, 0xfa, 0x9f,
		0x42, 0x42, 0xcd, 0x07, 0x35, 0xe1, 0x83, 0x0e, 0xdd, 0x07, 0xc9, 0x8c, 0x48, 0x27, 0xc7, 0xa9,
		0x9f, 0xeb, 0x34, 0xcc, 0x84, 0x28, 0x1b, 0x96, 0x89, 0x81, 0xd9, 0x19, 0x9a, 0xa9, 0xc1, 0x59,
		0x1b, 0x9e, 0xb5, 0x01, 0x5a, 0x1b, 0xa2, 0x66, 0x8a, 0x48, 0x51, 0x73, 0xca, 0x41, 0x92, 0x79,
		0x2e, 0xd5, 0x20, 0xa7, 0x6a, 0x98, 0x5b, 0xd5, 0xcf, 0xb1, 0x5a, 0xe5, 0x5a, 0x2d, 0x13, 0x8d,
		0xb6, 0xb9, 0x57, 0x17, 0xf9, 0x46, 0x83, 0x5c, 0xac, 0x55, 0x4e, 0xd6, 0x75, 0x97, 0x99, 0xe6,
		0x68, 0x9d, 0xf6, 0xdd, 0xd1, 0x66, 0x5a, 0x77, 0x1d, 0xe5, 0x82, 0x15, 0x74, 0xeb, 0x05, 0xa1,
		0x4f, 0x82, 0x1e, 0x8b, 0xf4, 0x9d, 0x50, 0x21, 0x09, 0x57, 0x04, 0x57, 0xb4, 0x23, 0x57, 0xd4,
		0x0f, 0x85, 0xa0, 0xfd, 0xfa, 0xbf, 0x23, 0xd2, 0x37, 0xf0, 0x47, 0xcd, 0xd7, 0x1a, 0x32, 0x9f,
		0x89, 0x10, 0x34, 0xe6, 0xda, 0x2e, 0xc9, 0x7b, 0xf1, 0xe2, 0xba, 0x51, 0xef, 0x74, 0x1f, 0xaf,
		0x9b, 0xf5, 0x4e, 0x37, 0xfb, 0xd8, 0x9c, 0xfc, 0xc9, 0x3e, 0xb7, 0xae, 0x1b, 0xf5, 0xf6, 0xf4,
		0xf3, 0xd9, 0x75, 0xa3, 0x7e, 0xd6, 0x7d, 0x79, 0x73, 0xf3, 0xeb, 0xcb, 0x9f, 0xa7, 0x4f, 0xfa,
		0x82, 0xde, 0x5e, 0x72, 0x4c, 0x44, 0x69, 0x6c, 0x44, 0x31, 0x53, 0x41, 0x30, 0x0c, 0x18, 0x06,
		0x0c, 0x03, 0x86, 0xa9, 0xc8, 0xea, 0x11, 0x31, 0x4a, 0xf4, 0x09, 0x26, 0x97, 0x03, 0xbf, 0x80,
		0x5f, 0x76, 0xc4, 0x2f, 0xb3, 0x44, 0x70, 0x5d, 0xcb, 0x18, 0xb7, 0xcf, 0x32, 0xa3, 0xe8, 0xb1,
		0x1f, 0x7e, 0xe7, 0x3b, 0x20, 0x00, 0xab, 0x44, 0x9c, 0xac, 0x54, 0xa5, 0x68, 0xa8, 0x34, 0x91,
		0x52, 0x4e, 0x1b, 0xa8, 0x4d, 0xa8, 0x94, 0x47, 0xcd, 0xc6, 0x13, 0x2b, 0xc5, 0x45, 0x94, 0x26,
		0x58, 0x54, 0xbb, 0x46, 0x71, 0xc2, 0x65, 0xc6, 0xb2, 0x95, 0x13, 0x2f, 0x33, 0x4b, 0x3e, 0x51,
		0x4c, 0x77, 0xd7, 0x64, 0x13, 0x32, 0x9f, 0x8a, 0x4b, 0xf6, 0xde, 0x4d, 0x2f, 0x89, 0x32, 0x53,
		0xe4, 0xf0, 0x51, 0x66, 0xea, 0x22, 0x05, 0x8a, 0x32, 0x53, 0xbb, 0x94, 0x26, 0xca, 0x4c, 0x0d,
		0x68, 0x18, 0x65, 0xa6, 0x9b, 0x2c, 0x7e, 0x90, 0x96, 0x15, 0x68, 0xb8, 0x5c, 0x9b, 0x52, 0x88,
		0x88, 0x24, 0x49, 0xee, 0x22, 0x24, 0x85, 0x10, 0x45, 0xcb, 0xea, 0x32, 0x88, 0x06, 0xd6, 0xa8,
		0xd9, 0x7b, 0x45, 0x3d, 0xf0, 0x49, 0xbd, 0x9f, 0x7a, 0xf5, 0x94, 0xa4, 0x6a, 0x4a, 0xcd, 0xa6,
		0x12, 0x2a, 0x84, 0x52, 0x6d, 0xcd, 0xb4, 0x21, 0x56, 0x3d, 0x1e, 0x5a, 0x61, 0x0d, 0x8a, 0x3a,
		0x11, 0x8c, 0xbb, 0x0b, 0xc6, 0xf7, 0xa3, 0x50, 0xf9, 0x21, 0x8f, 0xf6, 0x14, 0x8d, 0x3a, 0x6b,
		0x0e, 0xab, 0x46, 0xa9, 0xfe, 0x61, 0x21, 0x00, 0x65, 0xcd, 0x9b, 0x8d, 0xec, 0xab, 0x83, 0x1a,
		0x69, 0x58, 0xff, 0x35, 0x17, 0xb7, 0x88, 0xbf, 0x1e, 0xe2, 0x81, 0x3c, 0xf6, 0x4a, 0x1b, 0x21,
		0xee, 0x3a, 0xb4, 0xb8, 0x8b, 0xf8, 0x82, 0x3d, 0x68, 0x38, 0xa9, 0xbc, 0x3d, 0xbc, 0x14, 0xbc,
		0x94, 0x03, 0x2f, 0xf5, 0x2d, 0x0c, 0x03, 0x4a, 0xb8, 0x8e, 0x9b, 0x6a, 0x6e, 0x20, 0x50, 0xf3,
		0x03, 0x46, 0xb9, 0xe8, 0xe9, 0x8d, 0x41, 0xca, 0x42, 0x80, 0x03, 0xe0, 0xf0, 0x6c, 0x86, 0x2d,
		0x7e, 0x3c, 0x8e, 0x44, 0xd8, 0x8b, 0x6e, 0x9b, 0x1a, 0x60, 0x98, 0xc9, 0x00, 0x0b, 0xc0, 0xc2,
		0xf3, 0xc3, 0x42, 0xcb, 0x00, 0x0b, 0x2d, 0x60, 0x01, 0x58, 0x78, 0x3e, 0x58, 0xc0, 0xda, 0x47,
		0xe0, 0xc0, 0xd9, 0xda, 0x47, 0x32, 0x12, 0xb7, 0x94, 0x0b, 0xe6, 0xab, 0x17, 0x21, 0xcd, 0x8f,
		0x43, 0xe7, 0xe5, 0xf5, 0xca, 0x38, 0x9b, 0x28, 0xe3, 0x44, 0x19, 0xa7, 0x99, 0xe1, 0x16, 0x02,
		0xd9, 0x1a, 0x28, 0x9f, 0xc6, 0x42, 0xbf, 0xf3, 0xe7, 0xd7, 0x51, 0x4d, 0xae, 0x71, 0xbc, 0x95,
		0xfa, 0x13, 0x5d, 0x83, 0xb6, 0x31, 0x6c, 0x37, 0x06, 0x6e, 0x6b, 0xe8, 0xce, 0x0c, 0xde, 0x99,
		0xe1, 0x3b, 0x03, 0x80, 0x1e, 0x10, 0x34, 0x01, 0xa1, 0x1f, 0xad, 0xd8, 0x47, 0x2f, 0x86, 0xd1,
		0x8c, 0x79, 0x7f, 0xe8, 0x94, 0x89, 0x45, 0x31, 0x7b, 0x20, 0x82, 0xf6, 0xee, 0x26, 0x13, 0x18,
		0x86, 0x80, 0x2f, 0x5f, 0x04, 0x88, 0x07, 0xe2, 0x81, 0xf8, 0x7d, 0x46, 0x7c, 0x72, 0x67, 0x81,
		0xf4, 0xe4, 0x0e, 0x08, 0x07, 0xc2, 0x81, 0xf0, 0x7d, 0x46, 0x78, 0x4c, 0xef, 0x43, 0x41, 0x2d,
		0x83, 0xf8, 0xf2, 0x45, 0x80, 0x78, 0x20, 0x1e, 0x88, 0xdf, 0x63, 0xc4, 0x0b, 0x93, 0x7e, 0x28,
		0xfa, 0x60, 0x22, 0x0d, 0x8c, 0x03, 0xe3, 0x7b, 0x89, 0x71, 0x8d, 0x39, 0x88, 0x0d, 0xf0, 0xc3,
		0x7c, 0x42, 0xb6, 0x6e, 0x00, 0x95, 0x9a, 0xe1, 0xba, 0xe6, 0x99, 0xe9, 0x1b, 0xae, 0x6f, 0x2e,
		0x2e, 0x90, 0xfa, 0xf0, 0xe4, 0x31, 0x0d, 0xdd, 0xb5, 0xe5, 0xbb, 0x9b, 0x22, 0x37, 0xa7, 0x59,
		0x4e, 0xcd, 0x65, 0xbf, 0x85, 0x5c, 0x75, 0x81, 0xe2, 0x43, 0x3c, 0x28, 0xd6, 0xfd, 0x9e, 0x18,
		0x25, 0xe6, 0x6b, 0xb2, 0x22, 0xc6, 0xab, 0x78, 0x50, 0xac, 0x03, 0xee, 0x5d, 0xce, 0xdf, 0x62,
		0x8b, 0x9b, 0x4d, 0x7c, 0x1b, 0x1a, 0x6c, 0x65, 0x93, 0x0a, 0x61, 0x9b, 0x09, 0xcc, 0x4f, 0x58,
		0x21, 0xd7, 0x80, 0xdc, 0x2d, 0xb6, 0xa6, 0x50, 0xaf, 0xcb, 0x5b, 0x22, 0xee, 0xe6, 0x16, 0xe1,
		0x88, 0x0d, 0x54, 0x01, 0xc6, 0x5d, 0x80, 0x11, 0x1b, 0xa8, 0xe6, 0xa4, 0x84, 0x0d, 0x54, 0xb5,
		0xbb, 0x0c, 0x1b, 0xa8, 0x9a, 0x0c, 0x85, 0xb0, 0x81, 0x2a, 0x5c, 0x11, 0x5c, 0xd1, 0xce, 0xe3,
		0x42, 0x6c, 0x89, 0x78, 0x08, 0x5b, 0x22, 0x72, 0x22, 0xf4, 0x29, 0x29, 0x15, 0x02, 0x1b, 0x81,
		0x8d, 0x30, 0x4a, 0x75, 0x0d, 0x47, 0xec, 0x81, 0x0c, 0x58, 0x22, 0x48, 0x40, 0x90, 0xb0, 0x5f,
		0x41, 0x42, 0x5e, 0xb6, 0x40, 0x0c, 0xb6, 0x4e, 0x9e, 0x89, 0x82, 0x99, 0xc0, 0x4c, 0xc8, 0xa4,
		0x21, 0x93, 0x86, 0x4c, 0x1a, 0x32, 0x69, 0x0e, 0x9c, 0x11, 0x8b, 0x7a, 0x29, 0x17, 0x99, 0x3a,
		0xa4, 0x5c, 0x1c, 0x4e, 0x09, 0x4e, 0x09, 0xe1, 0x32, 0xc2, 0x65, 0xa7, 0x0c, 0x95, 0x4c, 0xb0,
		0xd5, 0x63, 0x5c, 0xd0, 0x78, 0x40, 0x74, 0x96, 0xfe, 0x16, 0x98, 0x5e, 0xbc, 0x02, 0x78, 0x0a,
		0x3c, 0xb5, 0xa3, 0xe0, 0x59, 0xbb, 0x98, 0x57, 0xb3, 0x88, 0xd7, 0x0d, 0xe6, 0x1e, 0xe2, 0x41,
		0xcf, 0xa4, 0xc4, 0x23, 0x97, 0x03, 0xbe, 0x80, 0x2f, 0x0c, 0x4e, 0x31, 0x38, 0xc5, 0xe0, 0x14,
		0x83, 0x53, 0xb3, 0x16, 0x38, 0x60, 0xca, 0xb8, 0x6b, 0xdc, 0x1e, 0x30, 0x55, 0xae, 0x30, 0xb7,
		0x3d, 0x59, 0xaa, 0x5c, 0x4a, 0x8e, 0x23, 0xa5, 0x9c, 0x47, 0x21, 0xd8, 0x1a, 0xc9, 0x36, 0x9a,
		0xc0, 0x91, 0x52, 0x9b, 0x8a, 0x0a, 0x70, 0xa4, 0x94, 0xe3, 0x3e, 0xd9, 0xf5, 0x91, 0x52, 0x15,
		0x34, 0x9c, 0x95, 0x58, 0x2a, 0x4c, 0x6f, 0x2e, 0x14, 0x65, 0x4a, 0x67, 0x35, 0x41, 0xc9, 0xcf,
		0x86, 0x92, 0x37, 0xbb, 0x6b, 0x23, 0xe8, 0x1b, 0xf4, 0x0d, 0xfa, 0x36, 0xa4, 0xef, 0xe8, 0x76,
		0x9c, 0xb0, 0x49, 0x91, 0xbc, 0x72, 0xc6, 0x7d, 0x56, 0x37, 0xb7, 0x2c, 0x0b, 0x4a, 0x07, 0xa5,
		0x3b, 0xa0, 0xf4, 0x3d, 0x39, 0x57, 0x2a, 0x20, 0x5c, 0xe3, 0x58, 0xa9, 0x40, 0x5a, 0x22, 0x8b,
		0x0d, 0x78, 0x9f, 0x8d, 0xfd, 0x2b, 0x6f, 0xc0, 0x1b, 0x10, 0x6e, 0xb6, 0x74, 0x29, 0x93, 0xc3,
		0xe4, 0x0a, 0x26, 0x57, 0x6c, 0x02, 0xad, 0xdd, 0x15, 0x59, 0xd4, 0xbf, 0x33, 0x71, 0x5b, 0xbf,
		0x27, 0x5a, 0x1b, 0xf4, 0x6d, 0xb7, 0xdc, 0xe2, 0x9f, 0x6d, 0xd6, 0x5b, 0xdc, 0xdc, 0x9c, 0xbc,
		0x28, 0xb7, 0x9c, 0x34, 0xea, 0x74, 0x1f, 0x4f, 0xaf, 0x1b, 0xf5, 0x56, 0xf7, 0xe5, 0x2f, 0xfb,
		0x59, 0x8f, 0xa1, 0xe4, 0x03, 0x4d, 0x7c, 0x21, 0xa8, 0x0b, 0xd4, 0xb5, 0x31, 0x1a, 0xc2, 0xbc,
		0xb0, 0xe5, 0x78, 0xd9, 0x36, 0x85, 0xe0, 0x62, 0xd8, 0x6c, 0x90, 0x52, 0xb0, 0x4a, 0x2d, 0xb8,
		0xee, 0x32, 0xcc, 0x0b, 0x6f, 0x69, 0x5e, 0x58, 0x65, 0xe4, 0x85, 0x99, 0x61, 0xd9, 0xcd, 0xe5,
		0x33, 0xc3, 0x8a, 0x5e, 0x5d, 0x3a, 0x2b, 0x7c, 0x95, 0x5e, 0x67, 0x9b, 0xa7, 0xe0, 0xae, 0x9d,
		0xfe, 0xc5, 0x19, 0xb8, 0xcb, 0x6a, 0x36, 0x3d, 0xff, 0xf6, 0x2a, 0x1e, 0x28, 0x9f, 0x7d, 0x7b,
		0x54, 0xf1, 0x46, 0xb2, 0x37, 0xa9, 0x7e, 0x83, 0x15, 0x4f, 0x5f, 0xf5, 0xd4, 0xf3, 0x4f, 0x3c,
		0x7b, 0xae, 0xec, 0x53, 0xfe, 0x64, 0xeb, 0x9e, 0xc8, 0x63, 0xc9, 0x7b, 0x72, 0x47, 0xbf, 0x84,
		0xe1, 0x34, 0xdc, 0xca, 0xa4, 0x8e, 0x9e, 0xfe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00,
		0xff, 0xff, 0xa2, 0xd2, 0xf7, 0x6a, 0xf0, 0xbb, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

